module GameBoy.Opcodes (
      Register (..)
    , Flag (..)
    , Operand (..)
    , Args (..)
    , Istruction (..)
    , Opcode (..)
    , decodeOpcode
    ) where

import           Protolude
import           Data.Word

data Register
    -- 8 bit
    -- accumulator / flags
    = A | F
    -- general purpose
    | B | C
    | D | E
    | H | L

    --16 bit
    -- stack pointer
    | SP
    -- program counter
    | PC

data Flag
    = Zf -- zero
    | Nf -- subtract
    | Hf -- half carry
    | Cf -- carry

data Operand
    = Reg  Register              -- register
    | RegP Register Register     -- pair of register
    | Cond [Flag]                -- condition based on flags
    | Bit Int                    -- index for bitwise operations
    | D8                         -- 8 bit data
    | D16                        -- 16 bit data (LS byte first)
    | A8                         -- 8 bit address addedd to 0xff00
    | AC                         -- address located at 0xff00 + value in C register
    | AH Int                     -- address located at 0x0000 + Int
    | A16                        -- 16 bit address
    | R8                         -- 8 bit signed data that are addedd to program counter

data Args
    = Unit
    | UnOp  Operand
    | BinOp Operand Operand

-- istruction set
data Istruction
    = LD   | LDH  | LDD  | LDI
    | LDHL | PUSH | POP  | ADD
    | ADC  | SUB  | SBC  | AND
    | OR   | XOR  | CP   | INC
    | DEC  | SWAP | DDA  | CPL
    | CCF  | SCF  | NOP  | HALT
    | STOP | DI   | EI   | RLCA
    | RLA  | RRCA | RRA  | RLC
    | RL   | RRC  | RR   | SLA
    | SRA  | SRL  | BIT  | SET
    | RES  | JP   | JR   | CALL
    | RST  | RET  | RETI | DAA

data Opcode
    = Opcode
        { _istruction :: Istruction
        , _arguments  :: Args
        , _cycles     :: [Int]                 -- clock cycle required
        , _len        :: Int                   -- istruction lenght in bytes
        , _raw        :: Either Word8 Word16   -- binary opcode
        }

decodeOpcode :: Either Word8 Word16 -> Opcode
decodeOpcode (Left w) = decodeOpcodeW8 w
decodeOpcode (Right w) = decodeOpcodeW16 w

decodeOpcodeW8 :: Word8 -> Opcode
decodeOpcodeW8 w = Opcode istr args cycles len (Left w)
    where
    (istr, args, cycles, len) = case w of
        0x00 -> (NOP, Unit, [4], 1)
        0x01 -> (LD, BinOp (RegP B C) D16, [12], 3)
        -- 0x10 -> (STOP, UnOp 0, [4], 2)
        0x10 -> (STOP, Unit, [4], 2)
        0x11 -> (LD, BinOp (RegP D E) D16, [12], 3)
        0x12 -> (LD, BinOp (RegP D E) (Reg A), [8], 1)
        0x13 -> (INC, UnOp (RegP D E), [8], 1)
        0x14 -> (INC, UnOp (Reg D), [4], 1)
        0x15 -> (DEC, UnOp (Reg D), [4], 1)
        0x16 -> (LD, BinOp (Reg D) D8, [8], 2)
        0x17 -> (RLA, Unit, [4], 1)
        0x18 -> (JR, UnOp R8, [12], 2)
        0x19 -> (ADD, BinOp (RegP H L) (RegP D E), [8], 1)
        0x1a -> (LD, BinOp (Reg A) (RegP D E), [8], 1)
        0x1b -> (DEC, UnOp (RegP D E), [8], 1)
        0x1c -> (INC, UnOp (Reg E), [4], 1)
        0x1d -> (DEC, UnOp (Reg E), [4], 1)
        0x1e -> (LD, BinOp (Reg E) D8, [8], 2)
        0x1f -> (RRA, Unit, [4], 1)
        0x02 -> (LD, BinOp (RegP B C) (Reg A), [8], 1)
        0x20 -> (JR, BinOp (Cond [Nf, Zf]) R8, [12 , 8], 2)
        0x21 -> (LD, BinOp (RegP H L) D16, [12], 3)
        0x22 -> (LDI, BinOp (RegP H L) (Reg A), [8], 1)
        0x23 -> (INC, UnOp (RegP H L), [8], 1)
        0x24 -> (INC, UnOp (Reg H), [4], 1)
        0x25 -> (DEC, UnOp (Reg H), [4], 1)
        0x26 -> (LD, BinOp (Reg H) D8, [8], 2)
        0x27 -> (DAA, Unit, [4], 1)
        0x28 -> (JR, BinOp (Cond [Zf]) R8, [12 , 8], 2)
        0x29 -> (ADD, BinOp (RegP H L) (RegP H L), [8], 1)
        0x2a -> (LDI, BinOp (Reg A) (RegP H L), [8], 1)
        0x2b -> (DEC, UnOp (RegP H L), [8], 1)
        0x2c -> (INC, UnOp (Reg L), [4], 1)
        0x2d -> (DEC, UnOp (Reg L), [4], 1)
        0x2e -> (LD, BinOp (Reg L) D8, [8], 2)
        0x2f -> (CPL, Unit, [4], 1)
        0x03 -> (INC, UnOp (RegP B C), [8], 1)
        0x30 -> (JR, BinOp (Cond [Nf, Cf]) R8, [12 , 8], 2)
        0x31 -> (LD, BinOp (Reg SP) D16, [12], 3)
        0x32 -> (LDD, BinOp (RegP H L) (Reg A), [8], 1)
        0x33 -> (INC, UnOp (Reg SP), [8], 1)
        0x34 -> (INC, UnOp (RegP H L), [12], 1)
        0x35 -> (DEC, UnOp (RegP H L), [12], 1)
        0x36 -> (LD, BinOp (RegP H L) D8, [12], 2)
        0x37 -> (SCF, Unit, [4], 1)
        0x38 -> (JR, BinOp (Reg C) R8, [12 , 8], 2)
        0x39 -> (ADD, BinOp (RegP H L) (Reg SP), [8], 1)
        0x3a -> (LDD, BinOp (Reg A) (RegP H L), [8], 1)
        0x3b -> (DEC, UnOp (Reg SP), [8], 1)
        0x3c -> (INC, UnOp (Reg A), [4], 1)
        0x3d -> (DEC, UnOp (Reg A), [4], 1)
        0x3e -> (LD, BinOp (Reg A) D8, [8], 2)
        0x3f -> (CCF, Unit, [4], 1)
        0x04 -> (INC, UnOp (Reg B), [4], 1)
        0x40 -> (LD, BinOp (Reg B) (Reg B), [4], 1)
        0x41 -> (LD, BinOp (Reg B) (Reg C), [4], 1)
        0x42 -> (LD, BinOp (Reg B) (Reg D), [4], 1)
        0x43 -> (LD, BinOp (Reg B) (Reg E), [4], 1)
        0x44 -> (LD, BinOp (Reg B) (Reg H), [4], 1)
        0x45 -> (LD, BinOp (Reg B) (Reg L), [4], 1)
        0x46 -> (LD, BinOp (Reg B) (RegP H L), [8], 1)
        0x47 -> (LD, BinOp (Reg B) (Reg A), [4], 1)
        0x48 -> (LD, BinOp (Reg C) (Reg B), [4], 1)
        0x49 -> (LD, BinOp (Reg C) (Reg C), [4], 1)
        0x4a -> (LD, BinOp (Reg C) (Reg D), [4], 1)
        0x4b -> (LD, BinOp (Reg C) (Reg E), [4], 1)
        0x4c -> (LD, BinOp (Reg C) (Reg H), [4], 1)
        0x4d -> (LD, BinOp (Reg C) (Reg L), [4], 1)
        0x4e -> (LD, BinOp (Reg C) (RegP H L), [8], 1)
        0x4f -> (LD, BinOp (Reg C) (Reg A), [4], 1)
        0x05 -> (DEC, UnOp (Reg B), [4], 1)
        0x50 -> (LD, BinOp (Reg D) (Reg B), [4], 1)
        0x51 -> (LD, BinOp (Reg D) (Reg C), [4], 1)
        0x52 -> (LD, BinOp (Reg D) (Reg D), [4], 1)
        0x53 -> (LD, BinOp (Reg D) (Reg E), [4], 1)
        0x54 -> (LD, BinOp (Reg D) (Reg H), [4], 1)
        0x55 -> (LD, BinOp (Reg D) (Reg L), [4], 1)
        0x56 -> (LD, BinOp (Reg D) (RegP H L), [8], 1)
        0x57 -> (LD, BinOp (Reg D) (Reg A), [4], 1)
        0x58 -> (LD, BinOp (Reg E) (Reg B), [4], 1)
        0x59 -> (LD, BinOp (Reg E) (Reg C), [4], 1)
        0x5a -> (LD, BinOp (Reg E) (Reg D), [4], 1)
        0x5b -> (LD, BinOp (Reg E) (Reg E), [4], 1)
        0x5c -> (LD, BinOp (Reg E) (Reg H), [4], 1)
        0x5d -> (LD, BinOp (Reg E) (Reg L), [4], 1)
        0x5e -> (LD, BinOp (Reg E) (RegP H L), [8], 1)
        0x5f -> (LD, BinOp (Reg E) (Reg A), [4], 1)
        0x06 -> (LD, BinOp (Reg B) D8, [8], 2)
        0x60 -> (LD, BinOp (Reg H) (Reg B), [4], 1)
        0x61 -> (LD, BinOp (Reg H) (Reg C), [4], 1)
        0x62 -> (LD, BinOp (Reg H) (Reg D), [4], 1)
        0x63 -> (LD, BinOp (Reg H) (Reg E), [4], 1)
        0x64 -> (LD, BinOp (Reg H) (Reg H), [4], 1)
        0x65 -> (LD, BinOp (Reg H) (Reg L), [4], 1)
        0x66 -> (LD, BinOp (Reg H) (RegP H L), [8], 1)
        0x67 -> (LD, BinOp (Reg H) (Reg A), [4], 1)
        0x68 -> (LD, BinOp (Reg L) (Reg B), [4], 1)
        0x69 -> (LD, BinOp (Reg L) (Reg C), [4], 1)
        0x6a -> (LD, BinOp (Reg L) (Reg D), [4], 1)
        0x6b -> (LD, BinOp (Reg L) (Reg E), [4], 1)
        0x6c -> (LD, BinOp (Reg L) (Reg H), [4], 1)
        0x6d -> (LD, BinOp (Reg L) (Reg L), [4], 1)
        0x6e -> (LD, BinOp (Reg L) (RegP H L), [8], 1)
        0x6f -> (LD, BinOp (Reg L) (Reg A), [4], 1)
        0x07 -> (RLCA, Unit, [4], 1)
        0x70 -> (LD, BinOp (RegP H L) (Reg B), [8], 1)
        0x71 -> (LD, BinOp (RegP H L) (Reg C), [8], 1)
        0x72 -> (LD, BinOp (RegP H L) (Reg D), [8], 1)
        0x73 -> (LD, BinOp (RegP H L) (Reg E), [8], 1)
        0x74 -> (LD, BinOp (RegP H L) (Reg H), [8], 1)
        0x75 -> (LD, BinOp (RegP H L) (Reg L), [8], 1)
        0x76 -> (HALT, Unit, [4], 1)
        0x77 -> (LD, BinOp (RegP H L) (Reg A), [8], 1)
        0x78 -> (LD, BinOp (Reg A) (Reg B), [4], 1)
        0x79 -> (LD, BinOp (Reg A) (Reg C), [4], 1)
        0x7a -> (LD, BinOp (Reg A) (Reg D), [4], 1)
        0x7b -> (LD, BinOp (Reg A) (Reg E), [4], 1)
        0x7c -> (LD, BinOp (Reg A) (Reg H), [4], 1)
        0x7d -> (LD, BinOp (Reg A) (Reg L), [4], 1)
        0x7e -> (LD, BinOp (Reg A) (RegP H L), [8], 1)
        0x7f -> (LD, BinOp (Reg A) (Reg A), [4], 1)
        0x08 -> (LD, BinOp A16 (Reg SP), [20], 3)
        0x80 -> (ADD, BinOp (Reg A) (Reg B), [4], 1)
        0x81 -> (ADD, BinOp (Reg A) (Reg C), [4], 1)
        0x82 -> (ADD, BinOp (Reg A) (Reg D), [4], 1)
        0x83 -> (ADD, BinOp (Reg A) (Reg E), [4], 1)
        0x84 -> (ADD, BinOp (Reg A) (Reg H), [4], 1)
        0x85 -> (ADD, BinOp (Reg A) (Reg L), [4], 1)
        0x86 -> (ADD, BinOp (Reg A) (RegP H L), [8], 1)
        0x87 -> (ADD, BinOp (Reg A) (Reg A), [4], 1)
        0x88 -> (ADC, BinOp (Reg A) (Reg B), [4], 1)
        0x89 -> (ADC, BinOp (Reg A) (Reg C), [4], 1)
        0x8a -> (ADC, BinOp (Reg A) (Reg D), [4], 1)
        0x8b -> (ADC, BinOp (Reg A) (Reg E), [4], 1)
        0x8c -> (ADC, BinOp (Reg A) (Reg H), [4], 1)
        0x8d -> (ADC, BinOp (Reg A) (Reg L), [4], 1)
        0x8e -> (ADC, BinOp (Reg A) (RegP H L), [8], 1)
        0x8f -> (ADC, BinOp (Reg A) (Reg A), [4], 1)
        0x09 -> (ADD, BinOp (RegP H L) (RegP B C), [8], 1)
        0x90 -> (SUB, UnOp (Reg B), [4], 1)
        0x91 -> (SUB, UnOp (Reg C), [4], 1)
        0x92 -> (SUB, UnOp (Reg D), [4], 1)
        0x93 -> (SUB, UnOp (Reg E), [4], 1)
        0x94 -> (SUB, UnOp (Reg H), [4], 1)
        0x95 -> (SUB, UnOp (Reg L), [4], 1)
        0x96 -> (SUB, UnOp (RegP H L), [8], 1)
        0x97 -> (SUB, UnOp (Reg A), [4], 1)
        0x98 -> (SBC, BinOp (Reg A) (Reg B), [4], 1)
        0x99 -> (SBC, BinOp (Reg A) (Reg C), [4], 1)
        0x9a -> (SBC, BinOp (Reg A) (Reg D), [4], 1)
        0x9b -> (SBC, BinOp (Reg A) (Reg E), [4], 1)
        0x9c -> (SBC, BinOp (Reg A) (Reg H), [4], 1)
        0x9d -> (SBC, BinOp (Reg A) (Reg L), [4], 1)
        0x9e -> (SBC, BinOp (Reg A) (RegP H L), [8], 1)
        0x9f -> (SBC, BinOp (Reg A) (Reg A), [4], 1)
        0x0a -> (LD, BinOp (Reg A) (RegP B C), [8], 1)
        0xa0 -> (AND, UnOp (Reg B), [4], 1)
        0xa1 -> (AND, UnOp (Reg C), [4], 1)
        0xa2 -> (AND, UnOp (Reg D), [4], 1)
        0xa3 -> (AND, UnOp (Reg E), [4], 1)
        0xa4 -> (AND, UnOp (Reg H), [4], 1)
        0xa5 -> (AND, UnOp (Reg L), [4], 1)
        0xa6 -> (AND, UnOp (RegP H L), [8], 1)
        0xa7 -> (AND, UnOp (Reg A), [4], 1)
        0xa8 -> (XOR, UnOp (Reg B), [4], 1)
        0xa9 -> (XOR, UnOp (Reg C), [4], 1)
        0xaa -> (XOR, UnOp (Reg D), [4], 1)
        0xab -> (XOR, UnOp (Reg E), [4], 1)
        0xac -> (XOR, UnOp (Reg H), [4], 1)
        0xad -> (XOR, UnOp (Reg L), [4], 1)
        0xae -> (XOR, UnOp (RegP H L), [8], 1)
        0xaf -> (XOR, UnOp (Reg A), [4], 1)
        0x0b -> (DEC, UnOp (RegP B C), [8], 1)
        0xb0 -> (OR, UnOp (Reg B), [4], 1)
        0xb1 -> (OR, UnOp (Reg C), [4], 1)
        0xb2 -> (OR, UnOp (Reg D), [4], 1)
        0xb3 -> (OR, UnOp (Reg E), [4], 1)
        0xb4 -> (OR, UnOp (Reg H), [4], 1)
        0xb5 -> (OR, UnOp (Reg L), [4], 1)
        0xb6 -> (OR, UnOp (RegP H L), [8], 1)
        0xb7 -> (OR, UnOp (Reg A), [4], 1)
        0xb8 -> (CP, UnOp (Reg B), [4], 1)
        0xb9 -> (CP, UnOp (Reg C), [4], 1)
        0xba -> (CP, UnOp (Reg D), [4], 1)
        0xbb -> (CP, UnOp (Reg E), [4], 1)
        0xbc -> (CP, UnOp (Reg H), [4], 1)
        0xbd -> (CP, UnOp (Reg L), [4], 1)
        0xbe -> (CP, UnOp (RegP H L), [8], 1)
        0xbf -> (CP, UnOp (Reg A), [4], 1)
        0x0c -> (INC, UnOp (Reg C), [4], 1)
        0xc0 -> (RET, UnOp (Cond [Nf, Zf]), [20 , 8], 1)
        0xc1 -> (POP, UnOp (RegP B C), [12], 1)
        0xc2 -> (JP, BinOp (Cond [Nf, Zf]) A16, [16 , 12], 3)
        0xc3 -> (JP, UnOp A16, [16], 3)
        0xc4 -> (CALL, BinOp (Cond [Nf, Zf]) A16, [24 , 12], 3)
        0xc5 -> (PUSH, UnOp (RegP B C), [16], 1)
        0xc6 -> (ADD, BinOp (Reg A) D8, [8], 2)
        0xc7 -> (RST, UnOp (AH 0), [16], 1)
        0xc8 -> (RET, UnOp (Cond [Zf]), [20 , 8], 1)
        0xc9 -> (RET, Unit, [16], 1)
        0xca -> (JP, BinOp (Cond [Zf]) A16, [16 , 12], 3)
        -- 0xcb -> (PREFIX, UnOp (RegP C B), [4], 1)
        0xcc -> (CALL, BinOp (Cond [Zf]) A16, [24 , 12], 3)
        0xcd -> (CALL, UnOp A16, [24], 3)
        0xce -> (ADC, BinOp (Reg A) D8, [8], 2)
        0xcf -> (RST, UnOp (AH 8), [16], 1)
        0x0d -> (DEC, UnOp (Reg C), [4], 1)
        0xd0 -> (RET, UnOp (Cond [Nf, Cf]), [20 , 8], 1)
        0xd1 -> (POP, UnOp (RegP D E), [12], 1)
        0xd2 -> (JP, BinOp (Cond [Nf, Cf]) A16, [16 , 12], 3)
        0xd4 -> (CALL, BinOp (Cond [Nf, Cf]) A16, [24 , 12], 3)
        0xd5 -> (PUSH, UnOp (RegP D E), [16], 1)
        0xd6 -> (SUB, UnOp D8, [8], 2)
        0xd7 -> (RST, UnOp (AH 10), [16], 1)
        0xd8 -> (RET, UnOp (Reg C), [20 , 8], 1)
        0xd9 -> (RETI, Unit, [16], 1)
        0xda -> (JP, BinOp (Reg C) A16, [16 , 12], 3)
        0xdc -> (CALL, BinOp (Reg C) A16, [24 , 12], 3)
        0xde -> (SBC, BinOp (Reg A) D8, [8], 2)
        0xdf -> (RST, UnOp (AH 18), [16], 1)
        0x0e -> (LD, BinOp (Reg C) D8, [8], 2)
        0xe0 -> (LDH, BinOp A8 (Reg A), [12], 2)
        0xe1 -> (POP, UnOp (RegP H L), [12], 1)
        0xe2 -> (LD, BinOp AC (Reg A), [8], 2)
        0xe5 -> (PUSH, UnOp (RegP H L), [16], 1)
        0xe6 -> (AND, UnOp D8, [8], 2)
        0xe7 -> (RST, UnOp (AH 20), [16], 1)
        0xe8 -> (ADD, BinOp (Reg SP) R8, [16], 2)
        0xe9 -> (JP, UnOp (RegP H L), [4], 1)
        0xea -> (LD, BinOp A16 (Reg A), [16], 3)
        0xee -> (XOR, UnOp D8, [8], 2)
        0xef -> (RST, UnOp (AH 28), [16], 1)
        0x0f -> (RRCA, Unit, [4], 1)
        0xf0 -> (LDH, BinOp (Reg A) A8, [12], 2)
        0xf1 -> (POP, UnOp (RegP A F), [12], 1)
        0xf2 -> (LD, BinOp (Reg A) AC, [8], 2)
        0xf3 -> (DI, Unit, [4], 1)
        0xf5 -> (PUSH, UnOp (RegP A F), [16], 1)
        0xf6 -> (OR, UnOp D8, [8], 2)
        0xf7 -> (RST, UnOp (AH 30), [16], 1)
        0xf8 -> (LDHL, BinOp (Reg SP) R8, [12], 2)
        0xf9 -> (LD, BinOp (Reg SP) (RegP H L), [8], 1)
        0xfa -> (LD, BinOp (Reg A) A16, [16], 3)
        0xfb -> (EI, Unit, [4], 1)
        0xfe -> (CP, UnOp D8, [8], 2)
        0xff -> (RST, UnOp (AH 38), [16], 1)

decodeOpcodeW16 :: Word16 -> Opcode
decodeOpcodeW16 w = Opcode istr args cycles len (Right w)
    where
    (istr, args, cycles, len) = case w of
        0xcb00 -> (RLC, UnOp (Reg B), [8], 2)
        0xcb01 -> (RLC, UnOp (Reg C), [8], 2)
        0xcb10 -> (RL, UnOp (Reg B), [8], 2)
        0xcb11 -> (RL, UnOp (Reg C), [8], 2)
        0xcb12 -> (RL, UnOp (Reg D), [8], 2)
        0xcb13 -> (RL, UnOp (Reg E), [8], 2)
        0xcb14 -> (RL, UnOp (Reg H), [8], 2)
        0xcb15 -> (RL, UnOp (Reg L), [8], 2)
        0xcb16 -> (RL, UnOp (RegP H L), [16], 2)
        0xcb17 -> (RL, UnOp (Reg A), [8], 2)
        0xcb18 -> (RR, UnOp (Reg B), [8], 2)
        0xcb19 -> (RR, UnOp (Reg C), [8], 2)
        0xcb1a -> (RR, UnOp (Reg D), [8], 2)
        0xcb1b -> (RR, UnOp (Reg E), [8], 2)
        0xcb1c -> (RR, UnOp (Reg H), [8], 2)
        0xcb1d -> (RR, UnOp (Reg L), [8], 2)
        0xcb1e -> (RR, UnOp (RegP H L), [16], 2)
        0xcb1f -> (RR, UnOp (Reg A), [8], 2)
        0xcb02 -> (RLC, UnOp (Reg D), [8], 2)
        0xcb20 -> (SLA, UnOp (Reg B), [8], 2)
        0xcb21 -> (SLA, UnOp (Reg C), [8], 2)
        0xcb22 -> (SLA, UnOp (Reg D), [8], 2)
        0xcb23 -> (SLA, UnOp (Reg E), [8], 2)
        0xcb24 -> (SLA, UnOp (Reg H), [8], 2)
        0xcb25 -> (SLA, UnOp (Reg L), [8], 2)
        0xcb26 -> (SLA, UnOp (RegP H L), [16], 2)
        0xcb27 -> (SLA, UnOp (Reg A), [8], 2)
        0xcb28 -> (SRA, UnOp (Reg B), [8], 2)
        0xcb29 -> (SRA, UnOp (Reg C), [8], 2)
        0xcb2a -> (SRA, UnOp (Reg D), [8], 2)
        0xcb2b -> (SRA, UnOp (Reg E), [8], 2)
        0xcb2c -> (SRA, UnOp (Reg H), [8], 2)
        0xcb2d -> (SRA, UnOp (Reg L), [8], 2)
        0xcb2e -> (SRA, UnOp (RegP H L), [16], 2)
        0xcb2f -> (SRA, UnOp (Reg A), [8], 2)
        0xcb03 -> (RLC, UnOp (Reg E), [8], 2)
        0xcb30 -> (SWAP, UnOp (Reg B), [8], 2)
        0xcb31 -> (SWAP, UnOp (Reg C), [8], 2)
        0xcb32 -> (SWAP, UnOp (Reg D), [8], 2)
        0xcb33 -> (SWAP, UnOp (Reg E), [8], 2)
        0xcb34 -> (SWAP, UnOp (Reg H), [8], 2)
        0xcb35 -> (SWAP, UnOp (Reg L), [8], 2)
        0xcb36 -> (SWAP, UnOp (RegP H L), [16], 2)
        0xcb37 -> (SWAP, UnOp (Reg A), [8], 2)
        0xcb38 -> (SRL, UnOp (Reg B), [8], 2)
        0xcb39 -> (SRL, UnOp (Reg C), [8], 2)
        0xcb3a -> (SRL, UnOp (Reg D), [8], 2)
        0xcb3b -> (SRL, UnOp (Reg E), [8], 2)
        0xcb3c -> (SRL, UnOp (Reg H), [8], 2)
        0xcb3d -> (SRL, UnOp (Reg L), [8], 2)
        0xcb3e -> (SRL, UnOp (RegP H L), [16], 2)
        0xcb3f -> (SRL, UnOp (Reg A), [8], 2)
        0xcb04 -> (RLC, UnOp (Reg H), [8], 2)
        0xcb40 -> (BIT, BinOp (Bit 0) (Reg B), [8], 2)
        0xcb41 -> (BIT, BinOp (Bit 0) (Reg C), [8], 2)
        0xcb42 -> (BIT, BinOp (Bit 0) (Reg D), [8], 2)
        0xcb43 -> (BIT, BinOp (Bit 0) (Reg E), [8], 2)
        0xcb44 -> (BIT, BinOp (Bit 0) (Reg H), [8], 2)
        0xcb45 -> (BIT, BinOp (Bit 0) (Reg L), [8], 2)
        0xcb46 -> (BIT, BinOp (Bit 0) (RegP H L), [16], 2)
        0xcb47 -> (BIT, BinOp (Bit 0) (Reg A), [8], 2)
        0xcb48 -> (BIT, BinOp (Bit 1) (Reg B), [8], 2)
        0xcb49 -> (BIT, BinOp (Bit 1) (Reg C), [8], 2)
        0xcb4a -> (BIT, BinOp (Bit 1) (Reg D), [8], 2)
        0xcb4b -> (BIT, BinOp (Bit 1) (Reg E), [8], 2)
        0xcb4c -> (BIT, BinOp (Bit 1) (Reg H), [8], 2)
        0xcb4d -> (BIT, BinOp (Bit 1) (Reg L), [8], 2)
        0xcb4e -> (BIT, BinOp (Bit 1) (RegP H L), [16], 2)
        0xcb4f -> (BIT, BinOp (Bit 1) (Reg A), [8], 2)
        0xcb05 -> (RLC, UnOp (Reg L), [8], 2)
        0xcb50 -> (BIT, BinOp (Bit 2) (Reg B), [8], 2)
        0xcb51 -> (BIT, BinOp (Bit 2) (Reg C), [8], 2)
        0xcb52 -> (BIT, BinOp (Bit 2) (Reg D), [8], 2)
        0xcb53 -> (BIT, BinOp (Bit 2) (Reg E), [8], 2)
        0xcb54 -> (BIT, BinOp (Bit 2) (Reg H), [8], 2)
        0xcb55 -> (BIT, BinOp (Bit 2) (Reg L), [8], 2)
        0xcb56 -> (BIT, BinOp (Bit 2) (RegP H L), [16], 2)
        0xcb57 -> (BIT, BinOp (Bit 2) (Reg A), [8], 2)
        0xcb58 -> (BIT, BinOp (Bit 3) (Reg B), [8], 2)
        0xcb59 -> (BIT, BinOp (Bit 3) (Reg C), [8], 2)
        0xcb5a -> (BIT, BinOp (Bit 3) (Reg D), [8], 2)
        0xcb5b -> (BIT, BinOp (Bit 3) (Reg E), [8], 2)
        0xcb5c -> (BIT, BinOp (Bit 3) (Reg H), [8], 2)
        0xcb5d -> (BIT, BinOp (Bit 3) (Reg L), [8], 2)
        0xcb5e -> (BIT, BinOp (Bit 3) (RegP H L), [16], 2)
        0xcb5f -> (BIT, BinOp (Bit 3) (Reg A), [8], 2)
        0xcb06 -> (RLC, UnOp (RegP H L), [16], 2)
        0xcb60 -> (BIT, BinOp (Bit 4) (Reg B), [8], 2)
        0xcb61 -> (BIT, BinOp (Bit 4) (Reg C), [8], 2)
        0xcb62 -> (BIT, BinOp (Bit 4) (Reg D), [8], 2)
        0xcb63 -> (BIT, BinOp (Bit 4) (Reg E), [8], 2)
        0xcb64 -> (BIT, BinOp (Bit 4) (Reg H), [8], 2)
        0xcb65 -> (BIT, BinOp (Bit 4) (Reg L), [8], 2)
        0xcb66 -> (BIT, BinOp (Bit 4) (RegP H L), [16], 2)
        0xcb67 -> (BIT, BinOp (Bit 4) (Reg A), [8], 2)
        0xcb68 -> (BIT, BinOp (Bit 5) (Reg B), [8], 2)
        0xcb69 -> (BIT, BinOp (Bit 5) (Reg C), [8], 2)
        0xcb6a -> (BIT, BinOp (Bit 5) (Reg D), [8], 2)
        0xcb6b -> (BIT, BinOp (Bit 5) (Reg E), [8], 2)
        0xcb6c -> (BIT, BinOp (Bit 5) (Reg H), [8], 2)
        0xcb6d -> (BIT, BinOp (Bit 5) (Reg L), [8], 2)
        0xcb6e -> (BIT, BinOp (Bit 5) (RegP H L), [16], 2)
        0xcb6f -> (BIT, BinOp (Bit 5) (Reg A), [8], 2)
        0xcb07 -> (RLC, UnOp (Reg A), [8], 2)
        0xcb70 -> (BIT, BinOp (Bit 6) (Reg B), [8], 2)
        0xcb71 -> (BIT, BinOp (Bit 6) (Reg C), [8], 2)
        0xcb72 -> (BIT, BinOp (Bit 6) (Reg D), [8], 2)
        0xcb73 -> (BIT, BinOp (Bit 6) (Reg E), [8], 2)
        0xcb74 -> (BIT, BinOp (Bit 6) (Reg H), [8], 2)
        0xcb75 -> (BIT, BinOp (Bit 6) (Reg L), [8], 2)
        0xcb76 -> (BIT, BinOp (Bit 6) (RegP H L), [16], 2)
        0xcb77 -> (BIT, BinOp (Bit 6) (Reg A), [8], 2)
        0xcb78 -> (BIT, BinOp (Bit 7) (Reg B), [8], 2)
        0xcb79 -> (BIT, BinOp (Bit 7) (Reg C), [8], 2)
        0xcb7a -> (BIT, BinOp (Bit 7) (Reg D), [8], 2)
        0xcb7b -> (BIT, BinOp (Bit 7) (Reg E), [8], 2)
        0xcb7c -> (BIT, BinOp (Bit 7) (Reg H), [8], 2)
        0xcb7d -> (BIT, BinOp (Bit 7) (Reg L), [8], 2)
        0xcb7e -> (BIT, BinOp (Bit 7) (RegP H L), [16], 2)
        0xcb7f -> (BIT, BinOp (Bit 7) (Reg A), [8], 2)
        0xcb08 -> (RRC, UnOp (Reg B), [8], 2)
        0xcb80 -> (RES, BinOp (Bit 0) (Reg B), [8], 2)
        0xcb81 -> (RES, BinOp (Bit 0) (Reg C), [8], 2)
        0xcb82 -> (RES, BinOp (Bit 0) (Reg D), [8], 2)
        0xcb83 -> (RES, BinOp (Bit 0) (Reg E), [8], 2)
        0xcb84 -> (RES, BinOp (Bit 0) (Reg H), [8], 2)
        0xcb85 -> (RES, BinOp (Bit 0) (Reg L), [8], 2)
        0xcb86 -> (RES, BinOp (Bit 0) (RegP H L), [16], 2)
        0xcb87 -> (RES, BinOp (Bit 0) (Reg A), [8], 2)
        0xcb88 -> (RES, BinOp (Bit 1) (Reg B), [8], 2)
        0xcb89 -> (RES, BinOp (Bit 1) (Reg C), [8], 2)
        0xcb8a -> (RES, BinOp (Bit 1) (Reg D), [8], 2)
        0xcb8b -> (RES, BinOp (Bit 1) (Reg E), [8], 2)
        0xcb8c -> (RES, BinOp (Bit 1) (Reg H), [8], 2)
        0xcb8d -> (RES, BinOp (Bit 1) (Reg L), [8], 2)
        0xcb8e -> (RES, BinOp (Bit 1) (RegP H L), [16], 2)
        0xcb8f -> (RES, BinOp (Bit 1) (Reg A), [8], 2)
        0xcb09 -> (RRC, UnOp (Reg C), [8], 2)
        0xcb90 -> (RES, BinOp (Bit 2) (Reg B), [8], 2)
        0xcb91 -> (RES, BinOp (Bit 2) (Reg C), [8], 2)
        0xcb92 -> (RES, BinOp (Bit 2) (Reg D), [8], 2)
        0xcb93 -> (RES, BinOp (Bit 2) (Reg E), [8], 2)
        0xcb94 -> (RES, BinOp (Bit 2) (Reg H), [8], 2)
        0xcb95 -> (RES, BinOp (Bit 2) (Reg L), [8], 2)
        0xcb96 -> (RES, BinOp (Bit 2) (RegP H L), [16], 2)
        0xcb97 -> (RES, BinOp (Bit 2) (Reg A), [8], 2)
        0xcb98 -> (RES, BinOp (Bit 3) (Reg B), [8], 2)
        0xcb99 -> (RES, BinOp (Bit 3) (Reg C), [8], 2)
        0xcb9a -> (RES, BinOp (Bit 3) (Reg D), [8], 2)
        0xcb9b -> (RES, BinOp (Bit 3) (Reg E), [8], 2)
        0xcb9c -> (RES, BinOp (Bit 3) (Reg H), [8], 2)
        0xcb9d -> (RES, BinOp (Bit 3) (Reg L), [8], 2)
        0xcb9e -> (RES, BinOp (Bit 3) (RegP H L), [16], 2)
        0xcb9f -> (RES, BinOp (Bit 3) (Reg A), [8], 2)
        0xcb0a -> (RRC, UnOp (Reg D), [8], 2)
        0xcba0 -> (RES, BinOp (Bit 4) (Reg B), [8], 2)
        0xcba1 -> (RES, BinOp (Bit 4) (Reg C), [8], 2)
        0xcba2 -> (RES, BinOp (Bit 4) (Reg D), [8], 2)
        0xcba3 -> (RES, BinOp (Bit 4) (Reg E), [8], 2)
        0xcba4 -> (RES, BinOp (Bit 4) (Reg H), [8], 2)
        0xcba5 -> (RES, BinOp (Bit 4) (Reg L), [8], 2)
        0xcba6 -> (RES, BinOp (Bit 4) (RegP H L), [16], 2)
        0xcba7 -> (RES, BinOp (Bit 4) (Reg A), [8], 2)
        0xcba8 -> (RES, BinOp (Bit 5) (Reg B), [8], 2)
        0xcba9 -> (RES, BinOp (Bit 5) (Reg C), [8], 2)
        0xcbaa -> (RES, BinOp (Bit 5) (Reg D), [8], 2)
        0xcbab -> (RES, BinOp (Bit 5) (Reg E), [8], 2)
        0xcbac -> (RES, BinOp (Bit 5) (Reg H), [8], 2)
        0xcbad -> (RES, BinOp (Bit 5) (Reg L), [8], 2)
        0xcbae -> (RES, BinOp (Bit 5) (RegP H L), [16], 2)
        0xcbaf -> (RES, BinOp (Bit 5) (Reg A), [8], 2)
        0xcb0b -> (RRC, UnOp (Reg E), [8], 2)
        0xcbb0 -> (RES, BinOp (Bit 6) (Reg B), [8], 2)
        0xcbb1 -> (RES, BinOp (Bit 6) (Reg C), [8], 2)
        0xcbb2 -> (RES, BinOp (Bit 6) (Reg D), [8], 2)
        0xcbb3 -> (RES, BinOp (Bit 6) (Reg E), [8], 2)
        0xcbb4 -> (RES, BinOp (Bit 6) (Reg H), [8], 2)
        0xcbb5 -> (RES, BinOp (Bit 6) (Reg L), [8], 2)
        0xcbb6 -> (RES, BinOp (Bit 6) (RegP H L), [16], 2)
        0xcbb7 -> (RES, BinOp (Bit 6) (Reg A), [8], 2)
        0xcbb8 -> (RES, BinOp (Bit 7) (Reg B), [8], 2)
        0xcbb9 -> (RES, BinOp (Bit 7) (Reg C), [8], 2)
        0xcbba -> (RES, BinOp (Bit 7) (Reg D), [8], 2)
        0xcbbb -> (RES, BinOp (Bit 7) (Reg E), [8], 2)
        0xcbbc -> (RES, BinOp (Bit 7) (Reg H), [8], 2)
        0xcbbd -> (RES, BinOp (Bit 7) (Reg L), [8], 2)
        0xcbbe -> (RES, BinOp (Bit 7) (RegP H L), [16], 2)
        0xcbbf -> (RES, BinOp (Bit 7) (Reg A), [8], 2)
        0xcb0c -> (RRC, UnOp (Reg H), [8], 2)
        0xcbc0 -> (SET, BinOp (Bit 0) (Reg B), [8], 2)
        0xcbc1 -> (SET, BinOp (Bit 0) (Reg C), [8], 2)
        0xcbc2 -> (SET, BinOp (Bit 0) (Reg D), [8], 2)
        0xcbc3 -> (SET, BinOp (Bit 0) (Reg E), [8], 2)
        0xcbc4 -> (SET, BinOp (Bit 0) (Reg H), [8], 2)
        0xcbc5 -> (SET, BinOp (Bit 0) (Reg L), [8], 2)
        0xcbc6 -> (SET, BinOp (Bit 0) (RegP H L), [16], 2)
        0xcbc7 -> (SET, BinOp (Bit 0) (Reg A), [8], 2)
        0xcbc8 -> (SET, BinOp (Bit 1) (Reg B), [8], 2)
        0xcbc9 -> (SET, BinOp (Bit 1) (Reg C), [8], 2)
        0xcbca -> (SET, BinOp (Bit 1) (Reg D), [8], 2)
        0xcbcb -> (SET, BinOp (Bit 1) (Reg E), [8], 2)
        0xcbcc -> (SET, BinOp (Bit 1) (Reg H), [8], 2)
        0xcbcd -> (SET, BinOp (Bit 1) (Reg L), [8], 2)
        0xcbce -> (SET, BinOp (Bit 1) (RegP H L), [16], 2)
        0xcbcf -> (SET, BinOp (Bit 1) (Reg A), [8], 2)
        0xcb0d -> (RRC, UnOp (Reg L), [8], 2)
        0xcbd0 -> (SET, BinOp (Bit 2) (Reg B), [8], 2)
        0xcbd1 -> (SET, BinOp (Bit 2) (Reg C), [8], 2)
        0xcbd2 -> (SET, BinOp (Bit 2) (Reg D), [8], 2)
        0xcbd3 -> (SET, BinOp (Bit 2) (Reg E), [8], 2)
        0xcbd4 -> (SET, BinOp (Bit 2) (Reg H), [8], 2)
        0xcbd5 -> (SET, BinOp (Bit 2) (Reg L), [8], 2)
        0xcbd6 -> (SET, BinOp (Bit 2) (RegP H L), [16], 2)
        0xcbd7 -> (SET, BinOp (Bit 2) (Reg A), [8], 2)
        0xcbd8 -> (SET, BinOp (Bit 3) (Reg B), [8], 2)
        0xcbd9 -> (SET, BinOp (Bit 3) (Reg C), [8], 2)
        0xcbda -> (SET, BinOp (Bit 3) (Reg D), [8], 2)
        0xcbdb -> (SET, BinOp (Bit 3) (Reg E), [8], 2)
        0xcbdc -> (SET, BinOp (Bit 3) (Reg H), [8], 2)
        0xcbdd -> (SET, BinOp (Bit 3) (Reg L), [8], 2)
        0xcbde -> (SET, BinOp (Bit 3) (RegP H L), [16], 2)
        0xcbdf -> (SET, BinOp (Bit 3) (Reg A), [8], 2)
        0xcb0e -> (RRC, UnOp (RegP H L), [16], 2)
        0xcbe0 -> (SET, BinOp (Bit 4) (Reg B), [8], 2)
        0xcbe1 -> (SET, BinOp (Bit 4) (Reg C), [8], 2)
        0xcbe2 -> (SET, BinOp (Bit 4) (Reg D), [8], 2)
        0xcbe3 -> (SET, BinOp (Bit 4) (Reg E), [8], 2)
        0xcbe4 -> (SET, BinOp (Bit 4) (Reg H), [8], 2)
        0xcbe5 -> (SET, BinOp (Bit 4) (Reg L), [8], 2)
        0xcbe6 -> (SET, BinOp (Bit 4) (RegP H L), [16], 2)
        0xcbe7 -> (SET, BinOp (Bit 4) (Reg A), [8], 2)
        0xcbe8 -> (SET, BinOp (Bit 5) (Reg B), [8], 2)
        0xcbe9 -> (SET, BinOp (Bit 5) (Reg C), [8], 2)
        0xcbea -> (SET, BinOp (Bit 5) (Reg D), [8], 2)
        0xcbeb -> (SET, BinOp (Bit 5) (Reg E), [8], 2)
        0xcbec -> (SET, BinOp (Bit 5) (Reg H), [8], 2)
        0xcbed -> (SET, BinOp (Bit 5) (Reg L), [8], 2)
        0xcbee -> (SET, BinOp (Bit 5) (RegP H L), [16], 2)
        0xcbef -> (SET, BinOp (Bit 5) (Reg A), [8], 2)
        0xcb0f -> (RRC, UnOp (Reg A), [8], 2)
        0xcbf0 -> (SET, BinOp (Bit 6) (Reg B), [8], 2)
        0xcbf1 -> (SET, BinOp (Bit 6) (Reg C), [8], 2)
        0xcbf2 -> (SET, BinOp (Bit 6) (Reg D), [8], 2)
        0xcbf3 -> (SET, BinOp (Bit 6) (Reg E), [8], 2)
        0xcbf4 -> (SET, BinOp (Bit 6) (Reg H), [8], 2)
        0xcbf5 -> (SET, BinOp (Bit 6) (Reg L), [8], 2)
        0xcbf6 -> (SET, BinOp (Bit 6) (RegP H L), [16], 2)
        0xcbf7 -> (SET, BinOp (Bit 6) (Reg A), [8], 2)
        0xcbf8 -> (SET, BinOp (Bit 7) (Reg B), [8], 2)
        0xcbf9 -> (SET, BinOp (Bit 7) (Reg C), [8], 2)
        0xcbfa -> (SET, BinOp (Bit 7) (Reg D), [8], 2)
        0xcbfb -> (SET, BinOp (Bit 7) (Reg E), [8], 2)
        0xcbfc -> (SET, BinOp (Bit 7) (Reg H), [8], 2)
        0xcbfd -> (SET, BinOp (Bit 7) (Reg L), [8], 2)
        0xcbfe -> (SET, BinOp (Bit 7) (RegP H L), [16], 2)
        0xcbff -> (SET, BinOp (Bit 7) (Reg A), [8], 2)
